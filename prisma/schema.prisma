generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  firebaseUid    String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  role           UserRole        @default(USER)
  moderatorLogs  ModeratorLog[]
  reviews        Review[]
  editedAnalyses ScaryAnalysis[] @relation("EditedAnalyses")
  ratings        ScaryRating[]

  @@map("users")
}

model ScaryEntity {
  id                  String         @id @default(cuid())
  googleKgId          String         @unique
  name                String
  description         String
  imageUrl            String?
  entityType          String
  isGenerating        Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  tmdbId              Int?
  posterUrl           String?
  backdropUrl         String?
  releaseDate         String?
  runtime             Int?
  homepage            String?
  imdbId              String?
  tmdbUrl             String?
  bookAuthors         String[]
  bookCoverUrl        String?
  isbn10              String?
  isbn13              String?
  googleBooksId       String?
  googleBooksUrl      String?
  pageCount           Int?
  publishDate         String?
  publishers          String[]
  musicBrainzId       String?
  albumArtUrl         String?
  musicArtists        String[]
  musicReleaseDate    String?
  trackCount          Int?
  musicType           String?
  musicBrainzUrl      String?
  lastFmUrl           String?
  averageAIScore      Float?         @default(0)
  slug                String         @unique
  wikipediaPageId     Int?
  wikipediaExtract    String?
  wikipediaImageUrl   String?
  wikipediaCategories String[]
  wikipediaUrl        String?
  moderatorLogs       ModeratorLog[]
  reviews             Review[]
  analysis            ScaryAnalysis?
  ratings             ScaryRating[]

  @@index([averageAIScore])
  @@map("scary_entities")
}

model ScaryDimension {
  id             String                   @id @default(cuid())
  name           String                   @unique
  description    String
  isStandard     Boolean                  @default(false)
  createdAt      DateTime                 @default(now())
  analysisScores AnalysisDimensionScore[]
  ratings        ScaryRating[]

  @@map("scary_dimensions")
}

model ScaryRating {
  id          String         @id @default(cuid())
  score       Int
  createdAt   DateTime       @default(now())
  entityId    String
  dimensionId String
  userId      String
  dimension   ScaryDimension @relation(fields: [dimensionId], references: [id], onDelete: Cascade)
  entity      ScaryEntity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([entityId, dimensionId, userId])
  @@map("scary_ratings")
}

model ScaryAnalysis {
  id               String                   @id @default(cuid())
  whyScary         String
  generatedAt      DateTime                 @default(now())
  entityId         String                   @unique
  isHumanEdited    Boolean                  @default(false)
  lastEditedAt     DateTime?
  lastEditedById   String?
  whyScaryOriginal String?
  dimensionScores  AnalysisDimensionScore[]
  entity           ScaryEntity              @relation(fields: [entityId], references: [id], onDelete: Cascade)
  lastEditedBy     User?                    @relation("EditedAnalyses", fields: [lastEditedById], references: [id])

  @@map("scary_analyses")
}

model AnalysisDimensionScore {
  id          String         @id @default(cuid())
  score       Int
  reasoning   String
  analysisId  String
  dimensionId String
  analysis    ScaryAnalysis  @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  dimension   ScaryDimension @relation(fields: [dimensionId], references: [id], onDelete: Cascade)

  @@unique([analysisId, dimensionId])
  @@index([score])
  @@index([analysisId, score])
  @@map("analysis_dimension_scores")
}

model Review {
  id        String      @id @default(cuid())
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  entityId  String
  userId    String
  entity    ScaryEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model ModeratorLog {
  id        String          @id @default(cuid())
  action    ModeratorAction
  details   Json            @db.Json
  createdAt DateTime        @default(now())
  userId    String
  entityId  String
  entity    ScaryEntity     @relation(fields: [entityId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityId])
  @@index([action])
  @@map("moderator_logs")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ModeratorAction {
  EDIT_DESCRIPTION
  EDIT_POSTER_URL
  EDIT_AI_SUMMARY
  TRIGGER_INTEGRATION
  REGENERATE_ANALYSIS
  EDIT_DIMENSION_SCORE
  DELETE_ENTITY
  MERGE_ENTITIES
  EDIT_METADATA
}
