// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  firebaseUid String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ratings   ScaryRating[]
  reviews   Review[]

  @@map("users")
}

model ScaryEntity {
  id          String   @id @default(cuid())
  googleKgId  String   @unique
  slug        String   @unique
  name        String
  description String
  imageUrl    String?
  entityType  String
  isGenerating Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Movie-specific fields from TMDB
  tmdbId      Int?
  posterUrl   String?
  backdropUrl String?
  releaseDate String?
  runtime     Int?
  homepage    String?
  imdbId      String?
  tmdbUrl     String?

  // Book-specific fields from Google Books
  googleBooksId  String?
  bookCoverUrl   String?
  isbn10         String?
  isbn13         String?
  pageCount      Int?
  publishDate    String?
  publishers     String[]
  bookAuthors    String[]
  googleBooksUrl String?

  // Music-specific fields from MusicBrainz
  musicBrainzId   String?
  albumArtUrl     String?
  musicArtists    String[]
  musicReleaseDate String?
  trackCount      Int?
  musicType       String? // album, single, ep, recording
  musicBrainzUrl  String?
  lastFmUrl       String?

  // Wikipedia-specific fields
  wikipediaPageId Int?
  wikipediaExtract String? @db.Text
  wikipediaImageUrl String?
  wikipediaCategories String[]
  wikipediaUrl    String?

  // Computed score field for efficient queries
  averageAIScore Float? @default(0)

  analysis    ScaryAnalysis?
  ratings     ScaryRating[]
  reviews     Review[]

  @@index([averageAIScore])
  @@map("scary_entities")
}

model ScaryDimension {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  isStandard  Boolean  @default(false)
  createdAt   DateTime @default(now())

  ratings           ScaryRating[]
  analysisScores    AnalysisDimensionScore[]

  @@map("scary_dimensions")
}

model ScaryRating {
  id          String   @id @default(cuid())
  score       Int      // 1-10
  createdAt   DateTime @default(now())

  entityId    String
  entity      ScaryEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  dimensionId String
  dimension   ScaryDimension @relation(fields: [dimensionId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([entityId, dimensionId, userId])
  @@map("scary_ratings")
}

model ScaryAnalysis {
  id          String   @id @default(cuid())
  whyScary    String   @db.Text
  generatedAt DateTime @default(now())

  entityId    String   @unique
  entity      ScaryEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)

  dimensionScores AnalysisDimensionScore[]

  @@map("scary_analyses")
}

model AnalysisDimensionScore {
  id        String @id @default(cuid())
  score     Int    // 1-10
  reasoning String @db.Text

  analysisId  String
  analysis    ScaryAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  dimensionId String
  dimension   ScaryDimension @relation(fields: [dimensionId], references: [id], onDelete: Cascade)

  @@unique([analysisId, dimensionId])
  @@index([score])
  @@index([analysisId, score])
  @@map("analysis_dimension_scores")
}

model Review {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entityId  String
  entity    ScaryEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}